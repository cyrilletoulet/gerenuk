#!/usr/bin/python2
#
#
# This file is part of Gerenuk.
#
# Gerenuk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Gerenuk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Gerenuk. If not, see <https://www.gnu.org/licenses/>.
#
#
# Cyrille TOULET <cyrille.toulet@univ-lille.fr>
# Wed 24 Jun 10:36:23 CEST 2020

import sys
import getopt
import logging
import gerenuk
import traceback
import gerenuk.monitoring


def help():
    print "Help"
    print "===="
    print
    print "Usage: gerenuk-cleaner [OPTION]..."
    print "Run the gerenuk cleaner"
    print
    print "Mandatory arguments to long options are mandatory for short options too."
    print "  -h, --help                   print this help"
    print "  -c <file>, --config <file>   specify the configuration file"
    print
    print "Exit status:"
    print " 0  if OK,"
    print " 1  if minor problems (e.g., unknown option),"
    print " 2  if serious trouble (e.g., backend error)."
    print
    print
    print "License"
    print "======="
    print
    print "Gerenuk is free software: you can redistribute it and/or modify"
    print "it under the terms of the GNU General Public License as published by"
    print "the Free Software Foundation, either version 3 of the License, or"
    print "any later version."
    print
    print "Gerenuk is distributed in the hope that it will be useful,"
    print "but WITHOUT ANY WARRANTY; without even the implied warranty of"
    print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
    print "GNU General Public License for more details."
    print
    print "You should have received a copy of the GNU General Public License"
    print "along with Gerenuk. If not, see <https://www.gnu.org/licenses/>."



if __name__ == "__main__":
    log = logging.getLogger("gerenuk-cleaner-task")

    try:
        # Arguments parsing
        config = gerenuk.Config()

        opts, args = getopt.getopt(sys.argv[1:], 'hc:', ['help', 'config='])
        for opt, value in opts:
            if opt in ('-h', '--help'):
                help()
                sys.exit(1)
            elif opt in ('-c', '--config'):
                config.load(value)

        # Logging
        stderr_handler = logging.StreamHandler(sys.stderr)
        log_file_handler = logging.FileHandler(config.get("cleaner", "log_file"))
        log_file_format = logging.Formatter('%(asctime)s [%(levelname)s] %(process)d: %(message)s')

        log_level = config.get("cleaner", "log_level")
        if log_level in config.LOG_LEVEL_MAPPING:
            log.setLevel(config.LOG_LEVEL_MAPPING[log_level])
            log_file_handler.setLevel(config.LOG_LEVEL_MAPPING[log_level])
        stderr_handler.setLevel(logging.WARNING)

        log_file_handler.setFormatter(log_file_format)
        log.addHandler(log_file_handler)
        log.addHandler(stderr_handler)

        # Run task
        openstack_mon = gerenuk.monitoring.OpenstackMonitor(config)
        openstack_mon.clean_read_alerts(log)

    # Errors
    except gerenuk.ConfigError, e:
        log.error("Configuration error: %s" % str(e))
        sys.exit(1)

    except gerenuk.DependencyError, e:
        log.error("Missing dependency: %s" % str(e))
        sys.exit(1)

    except Exception, e:
        log.critical("Service failure: %s" % str(e))
        log.critical(traceback.format_exc())
        sys.exit(1)

    finally:
        sys.exit(0)
